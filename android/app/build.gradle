apply plugin: "com.android.application"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

project.ext.envConfigFiles = [
        dev: ".env",
        staging: ".env.staging",
        production: ".env.production"
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle" // <- add this line

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
     lint {
        baseline = file("lint-baseline.xml")
    }
     packagingOptions{
    exclude '**/libjscexecutor.so'
  }
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    flavorDimensions "version"
    productFlavors {
        dev {
            dimension = project.APP_DIMENSION
            applicationId = project.DEV_APPLICATION_ID
            versionCode = 27
            // DEV_VERSION_NAME = 1.0.1 - keep this as x.y.<versionCode>
            versionName = project.DEV_VERSION_NAME
            multiDexEnabled = true
        }
        staging {
            dimension = project.APP_DIMENSION
            applicationId = project.STAGE_APPLICATION_ID
            versionCode = 27 // project.STAGE_VERSION_CODE
            versionName = project.STAGE_VERSION_NAME
            multiDexEnabled = true
        }
        production {
            dimension = project.APP_DIMENSION
            applicationId = project.PROD_APPLICATION_ID
            versionCode = 69
            versionName = project.PROD_VERSION_NAME
            multiDexEnabled = true
        }
    }

    namespace "com.rhatechnologies.oca"
    defaultConfig {
        resConfigs "en", "ar", "US"
        resValue "string", "build_config_package", "com.rhatechnologies.oca"
        applicationId "com.cenomi.oca.dev"
        compileSdkVersion rootProject.ext.compileSdkVersion
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode Integer.parseInt(project.DEV_VERSION_CODE)
        versionName project.DEV_VERSION_NAME
        vectorDrawables.useSupportLibrary = true

    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('release.keystore')
            storePassword 'oca_release'
            keyAlias 'android_release_key'
            keyPassword 'oca_release'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['debug', 'release']
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

            /* Add the firebaseCrashlytics extension (by default,
            * it's disabled to improve build speeds) and set
            * nativeSymbolUploadEnabled to true along with a pointer to native libs. */
            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
                unstrippedNativeLibsDir 'build/intermediates/merged_native_libs/release/out/lib'
            }
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    debugImplementation("com.facebook.flipper:flipper:0.201.0")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:0.201.0") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
    implementation project(':react-native-push-notification')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'com.google.android.gms:play-services-auth:20.6.0'
    implementation 'com.google.firebase:firebase-analytics:21.3.0'
    implementation project(':react-native-in-app-review')
}


tasks.addRule("Pattern: bumpDevVersionCode") { String taskName ->
    if (taskName.matches("bumpDevVersionCode")) {
        task(taskName) {
            doLast {

                println "Bumping version code"

                int oldVersionCode = android.productFlavors.dev.versionCode.toInteger()

		            println oldVersionCode

                int newVersionCode = oldVersionCode + 1

                def updated = buildFile.getText()
                updated = updated.replaceFirst("versionCode = $oldVersionCode", "versionCode = $newVersionCode")

                buildFile.setText(updated)
            }
        }
    }
}

tasks.addRule("Pattern: bumpStagingVersionCode") { String taskName ->
    if (taskName.matches("bumpStagingVersionCode")) {
        task(taskName) {
            doLast {

                println "Bumping version code"

                int oldVersionCode = android.productFlavors.staging.versionCode.toInteger()

		            println oldVersionCode

                int newVersionCode = oldVersionCode + 1

                def updated = buildFile.getText()
                updated = updated.replaceFirst("versionCode = $oldVersionCode", "versionCode = $newVersionCode")

                buildFile.setText(updated)
            }
        }
    }
}

tasks.addRule("Pattern: bumpProdVersionCode") { String taskName ->
    if (taskName.matches("bumpProdVersionCode")) {
        task(taskName) {
            doLast {

                println "Bumping version code"

                int oldVersionCode = android.productFlavors.production.versionCode.toInteger()

		            println oldVersionCode

                int newVersionCode = oldVersionCode + 1

                def updated = buildFile.getText()
                updated = updated.replaceFirst("versionCode = $oldVersionCode", "versionCode = $newVersionCode")

                buildFile.setText(updated)
            }
        }
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
